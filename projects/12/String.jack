// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let chars = Memory.alloc(maxLength);
        } else {
            let chars = 0;
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (chars > 0) {
            do Memory.deAlloc(chars);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let chars[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            return;
        }

        let length = length - 1;
        let chars[length] = 0;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int n, b, i, j;
        let n = 0;
        let b = 1;
        let i = length - 1;
        if (chars[0] = 45) {
            let j = 1;
        } else {
            let j = 0;
        }
        while (~(i < j)) {
            let n = n + (b * (chars[i] - 48));
            let b = b * 10;
            let i = i - 1;
        }

        if (chars[0] = 45) {
            let n = -n;
        }

        return n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int n, d, i;
        var char tmp;

        while (length > 0) {
            do eraseLastChar();
        }

        if (val = 0) {
            do appendChar(48);
            return;
        }

        let n = Math.abs(val);
        while (n > 0) {
            do appendChar((n - ((n / 10) * 10)) + 48);
            let n = n / 10;
        }

        if (val < 0) {
            do appendChar(45);
        }

        let i = 0;
        while (i < (length / 2)) {
            let tmp = chars[i];
            let chars[i] = chars[length - i - 1];
            let chars[length - i - 1] = tmp;
            let i = i + 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
