// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Mux16(
            a[0]=instruction[0],
            a[1]=instruction[1],
            a[2]=instruction[2],
            a[3]=instruction[3],
            a[4]=instruction[4],
            a[5]=instruction[5],
            a[6]=instruction[6],
            a[7]=instruction[7],
            a[8]=instruction[8],
            a[9]=instruction[9],
            a[10]=instruction[10],
            a[11]=instruction[11],
            a[12]=instruction[12],
            a[13]=instruction[13],
            a[14]=instruction[14],
            a[15]=instruction[15],
            b=aluOut,
            sel=instruction[15],
            out=inA);
        Not(in=instruction[15], out=aInst);
        Or(a=aInst, b=instruction[5], out=ldA);
        ARegister(in=inA, load=ldA, out=aOut, out[0..14]=addressM);
        And(a=instruction[4], b=instruction[15], out=ldD);
        DRegister(in=aluOut, load=ldD, out=dOut);
        PC(in=aOut, load=jmp, inc=notjmp, reset=reset, out[0..14]=pc);
        Mux16(a=aOut, b=inM, sel=instruction[12], out=yIn);
        ALU(
            x=dOut, y=yIn, out=aluOut, out=outM,
            zr=zero, ng=neg,
            zx=instruction[11],
            nx=instruction[10],
            zy=instruction[9],
            ny=instruction[8],
            f=instruction[7],
            no=instruction[6]);
        Not(in=neg, out=notneg);
        Not(in=zero, out=notzero);
        And(a=notneg, b=notzero, out=pos);
        And(a=neg, b=instruction[2], out=jmpneg);
        And(a=zero, b=instruction[1], out=jmpzero);
        And(a=pos, b=instruction[0], out=jmppos);
        Or(a=jmpneg, b=jmpzero, out=jmp0);
        Or(a=jmp0, b=jmppos, out=jmp1);
        And(a=jmp1, b=instruction[15], out=jmp);
        Not(in=jmp, out=notjmp);
        And(a=instruction[15], b=instruction[3], out=writeM);
}
